rollout AssignedMaterialRollout "Assigned material" width:290
(
	global assignedMaterialCustomAttributeId = #(0x7c3e099b, 0xd7bb97b)

	include "Alert.mxs"
	include "PrintCustomAttributes.mxs"
	include "CollectSlateMaterialEditorMaterials.mxs"
	
	button saveButton "Save assigned material in a custom attribute" width:260
	button restoreButton "Restore assigned material from a custom attribute" width:260
	button removeButton "Remove assigned material info" width:260
	button printButton "Debug - print properties" width:260
	
	local attributesSetDefinition = attributes "Assigned material" attribID:assignedMaterialCustomAttributeId
	(
		parameters main rollout:paramsRollout
		(
			assignedMaterial type:#string default:"" ui:assignedMaterialTextView
		)	
		rollout paramsRollout "Assigned material"
		(
			edittext assignedMaterialTextView "Material" readOnly:true
		)
	)
	
	fn saveAssignedMaterialInCustomAttribute obj =
	(
		-- asign attribute if required
		custAttributes.add obj attributesSetDefinition BaseObject:true
		
		-- assign attribute data
		if obj.material != undefined then
		(
			local attributesSet = custAttributes.get obj attributesSetDefinition BaseObject:true
			attributesSet.assignedMaterial = obj.material.name
		)
		else
		(
			format "The object has no material assigned.\n"
		)
	)
	
	fn restoreAssignedMaterialFromCustomAttribute obj =
	(
		local attributeSets = custAttributes.getDefs obj BaseObject: true
		if (attributeSets == undefined or attributeSets.count == 0) then
		(
			format "Object has no custom attributes.\n"
			return()
		)
		
		materialName = undefined
		
		-- method 1 -- 
		try
		(
			local attributesSet = custAttributes.get obj attributesSetDefinition BaseObject:true
			local materialName = attributesSet.assignedMaterial
		) 
		catch ()
					

		-- method 2 --
		if (materialName == undefined) do
		(
			for attributesSet in attributeSets do 
			(
				local attributeSetValues = custAttributes.get obj attributesSet BaseObject:true
				for attributeGroup in custAttributes.getPBlockDefs attributesSet do
				(
					for attributeIndex = 5 to attributeGroup.count do
					(
						local attribute = attributeGroup[attributeIndex]
						if ((attribute[1] as string) == "assignedMaterial") do
						(
							materialName = (getProperty attributeSetValues attribute[1])
							exit
						)
					)
				)
			)
		)

		if (materialName == undefined) do
		(
			format "Assigned material info not found for %.\n" (obj.name)
			return()	
		)
		
		local restoredMaterial = meditMaterials[materialName]
		if (restoredMaterial == undefined) do
		(
			restoredMaterial = sceneMaterials[materialName]
		)
		if (restoredMaterial == undefined) do
		(
			restoredMaterial = currentMaterialLibrary[materialName]
		)
		if (restoredMaterial == undefined) do
		(
			for currentMaterial in collectSlateMaterialEditorMaterials() do
			(
				showInterfaces currentMaterial
				if (currentMaterial.name == materialName) do
				(
					restoredMaterial = currentMaterial
					exit
				)
			)
		)
		
		if (restoredMaterial == undefined) then
		(
			messageBox ("Cannot restore [" + materialName + "] material - it is neither present in the scene nor in material editor.")
		)
		else
		(
			obj.material = restoredMaterial		
		)
	)

	
	fn removeCustomAttribute obj =
	(
		custAttributes.delete obj attributesSetDefinition
	)
		
	on saveButton pressed do
	(
		if selection.count == 0 then
		(
			messageBox "No object selected. Please select at least one object."
		)
		else
		(
			for obj in selection do
			(
				if (superclassof obj != Helper) do saveAssignedMaterialInCustomAttribute obj
			)
		)
	)
	
	on removeButton pressed do
	(
		if selection.count == 0 then
		(
			messageBox "No object selected. Please select at least one object."
		)
		else
		(
			for obj in selection do
			(
				removeCustomAttribute obj
			)
		)
	)
	
	on restoreButton pressed do
	(
		if selection.count == 0 then
		(
			messageBox "No object selected. Please select at least one object."
		)
		else
		(
			for obj in selection do
			(
				if (superclassof obj != Helper) do restoreAssignedMaterialFromCustomAttribute obj
			)
		)
	)
	
	on printButton pressed do
	(
		if selection.count == 0 then
		(
			messageBox "No object selected. Please select at least one object."
		)
		else
		(
			for obj in selection do
			(
				printCustomAttributes obj
			)
		)
	)
)
	
/*
PUTTING MULTIPLE MATERIALS TO LISTBOX

local attributesSetDefinition = attributes "Assigned materials" attribID:assignedMaterialsCustomAttributeId
(
	parameters main rollout:paramsRollout
	(
		assignedMaterials type:#string default:(#() as String)
	)	
	rollout paramsRollout "Assigned materials"
	(
		listbox assignedMaterialsListView "Materials" items:(execute assignedMaterials) readOnly:true
	)
)

fn saveAssignedMaterialsInCustomAttribute obj =
(
	-- asign attribute if required
	custAttributes.add obj attributesSetDefinition BaseObject:true
	
	-- assign attribute data
	if obj.material != undefined then
	(
		local materials = #()
		
		local mat = obj.material
		
		if classOf mat == MultiMaterial then
		(
			for i = 1 to mat.numsubs do
			(
				if (mat[i] != undefined) then
				(
					append materials ((i as string) + ":" + mat[i].name)
				)
			)
		)
		else
		(
			append materials ("1:" + mat.name)
		)
		
		local attributesSet = custAttributes.get obj attributesSetDefinition
		attributesSet.assignedMaterials = (materials as string)
		attributesSet.paramsRollout.assignedMaterialsListView.items = materials
	)
	else
	(
		format "The object has no material assigned.\n"
	)
)
*/